snippet http
	var http(method, url, callback) = function() {
		var req = window.XMLHttpRequest? (new XMLHttpRequest()): (new ActiveXObject("Microsoft.XMLHTTP");
		if (callback) req.onreadystatechange = callback;
		req.open(method, url, !!callback);
	}
snippet template
	var Template = function(template) {
	    var output = ["with(input){", 'var output="";'];
	    var lines = template.split("\n");
	    for (var i = 0; i < lines.length; i++) {
	        var line = lines[i].trim();
	        if (line[0] === "<") {
	            line = "output+=" + JSON.stringify(line).replace(/\$([\w.]+)/g, '"+($1)+"') + ";";
	        } else {
	            line = line.replace(
	                /&(amp|gt|lt);/g,
	                function(w) {return {"&amp;": "&", "&gt;": ">", "&lt;": "<"}[w]; });
	        }
	        output.push(line);
	    }
	    output.push("return output;", "}");
	    return new Function("input", output.join("\n"));
	};
snippet xml2obj
	var xml2obj = function(xml) {
	    var obj = {
	        toString: function() {
	            return xml.textContent.trim();
	        }
	    }
	    for (var i = 0; i < xml.children.length; i++) {
	        var key = xml.children[i].tagName.toLowerCase();
	        var value = xml2obj(xml.children[i]);
	        if (!obj[key]) {
	            obj[key] = value;
	        } else if (obj[key].constructor === Array) {
	            obj[key].push(value);
	        } else {
	            obj[key] = [obj[key], value];
	        }
	    }
	    var attrs = xml.getAttributeNames();
	    for (var i = 0; i < attrs.length; i++) {
	        var attr = attrs[i];
	        if (obj[attr]) attr = "$" + attr;
	        obj[attr] = xml.getAttribute(attr).trim();
	    }
	    return obj;
	};
snippet redux-reducer
	const actions = {};
	const handlers = Object.fromEntries(Object.entries({
	  update(state, id, data) {
	    return {};
	  },
	}).map(([action, handler]) => {
	  const type = Symbol(action);
	  actions[action] = (...args) => ({type, args});
	  return [type, handler];
	}));
	const reducer = (state, {type, args = []}) => {
	  return {...state, ...(handlers[type] && handlers[type](state, ...args) || {})};
	};
