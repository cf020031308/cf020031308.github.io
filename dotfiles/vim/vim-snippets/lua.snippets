snippet wrr
	function wrr(objs, key, default_weight)
	    -- usage:
	    --     for obj in wrr(objs) do
	    --         -- do something
	    --     end
	    -- obj with zero weight will not be yielded
	    -- objs will be sorted
	    local length, weight_sum, i = #objs, 0, 0
	    for j = 1, length do
	        weight_sum = weight_sum + (objs[j][key] or default_weight or 0)
	    end
	    return function()
	        if weight_sum <= 0 then return end
	        i = i + 1
	        local r, s = random() * weight_sum, 0
	        for j = i, length do
	            local w = objs[j][key] or default_weight or 0
	            s = s + w
	            if s > r then
	                weight_sum = weight_sum - w
	                objs[i], objs[j] = objs[j], objs[i]
	                return objs[i]
	            end
	        end
	    end
	end
snippets combination
	local function combination(t, m, n, r)
		-- for p in coroutine.wrap(function() combination({1, 2, 3, 4}, 2) end) do
		-- 	print(table.concat(p, ", "))
		-- end
		n = n or #t
		r = r or {}

		if m == 0 then
			coroutine.yield(r)
		elseif m == n then
			for i = 1, n do
				table.insert(r, t[i])
			end
			coroutine.yield(r)
			for i = 1, n do
				table.remove(r)
			end
		else
			combination(t, m, n - 1, r)
			table.insert(r, t[n])
			combination(t, m - 1, n - 1, r)
			table.remove(r)
		end
	end
snippets permutation
	local function permutation(t, m, n)
		-- for p in coroutine.wrap(function() permutation({1, 2, 3, 4}, 2) end) do
		-- 	print(table.concat(p, ", "))
		-- end
		n = n or #t
		if n == 0 then
			coroutine.yield(t)
		elseif m and n > m then
			for c in coroutine.wrap(function() combination(t, m, n) end) do
				permutation(c, m, m)
			end
		else
			for i = 1, n do
				t[n], t[i] = t[i], t[n]
				permutation(t, m, n - 1)
				t[n], t[i] = t[i], t[n]
			end
		end
	end


